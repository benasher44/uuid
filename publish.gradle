group GROUP
version VERSION

dokka {
  impliedPlatforms = ['Common'] // This will force platform tags for all non-common sources e.g. 'JVM'
  kotlinTasks {
    // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
    // use sourceRoot instead (see below)
    []
  }
  packageOptions {
    prefix = GROUP
  }
  sourceRoot {
    // assuming there is only a single source dir...
    path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
    platforms = ['Common']
  }
  if (kotlin.sourceSets.getNames().contains('jvmMain')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
      platforms = ['JVM']
    }
  }
  if (kotlin.sourceSets.getNames().contains('jsMain')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
      platforms = ['js']
    }
  }
  if (kotlin.sourceSets.getNames().contains('nativeMain')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
      platforms = ['native']
    }
  }
  if (kotlin.sourceSets.getNames().contains('nix32Main')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.nix32Main.kotlin.srcDirs[0]
      platforms = ['native']
    }
  }
  if (kotlin.sourceSets.getNames().contains('nix64Main')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.nix64Main.kotlin.srcDirs[0]
      platforms = ['native']
    }
  }
  if (kotlin.sourceSets.getNames().contains('mingwMain')) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.mingwMain.kotlin.srcDirs[0]
      platforms = ['native']
    }
  }
}

def isReleaseBuild() {
  return VERSION.contains('SNAPSHOT') == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      'https://oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
  return System.getenv('SONATYPE_USERNAME') ?: ''
}

def getRepositoryPassword() {
  return System.getenv('SONATYPE_PASSWORD') ?: ''
}

task javadocsJar(type: Jar, dependsOn: dokka) {
  classifier = 'javadoc'
  from dokka.outputDirectory
}

publishing {
  publications.all {
    artifact javadocsJar

    pom.withXml {
      def root = asNode()

      root.children().last() + {
        resolveStrategy = Closure.DELEGATE_FIRST

        description POM_DESCRIPTION
        name POM_NAME
        url POM_URL
        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
          }
        }
        scm {
          url POM_SCM_URL
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
        }
        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }

  repositories {
    maven {
      url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
      credentials {
        username getRepositoryUsername()
        password getRepositoryPassword()
      }
    }
  }
}

signing {
    required { isReleaseBuild() }
    def signingKeyId = System.getenv("SIGNING_KEYID")
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign(publishing.publications)
}



tasks.withType(Sign) {
    onlyIf { isReleaseBuild() }
}

tasks.register('publishMac') {
    dependsOn 'publishIosArm32PublicationToMavenRepository'
    dependsOn 'publishIosArm64PublicationToMavenRepository'
    dependsOn 'publishIosSimulatorArm64PublicationToMavenRepository'
    dependsOn 'publishIosX64PublicationToMavenRepository'
    dependsOn 'publishTvosArm64PublicationToMavenRepository'
    dependsOn 'publishTvosSimulatorArm64PublicationToMavenRepository'
    dependsOn 'publishTvosX64PublicationToMavenRepository'
    dependsOn 'publishWatchosArm32PublicationToMavenRepository'
    dependsOn 'publishWatchosArm64PublicationToMavenRepository'
    dependsOn 'publishWatchosSimulatorArm64PublicationToMavenRepository'
    dependsOn 'publishWatchosX64PublicationToMavenRepository'
    dependsOn 'publishWatchosX86PublicationToMavenRepository'
    dependsOn 'publishMacosArm64PublicationToMavenRepository'
    dependsOn 'publishMacosX64PublicationToMavenRepository'
    dependsOn 'publishJvmPublicationToMavenRepository'
    dependsOn 'publishJsPublicationToMavenRepository'
    dependsOn 'publishKotlinMultiplatformPublicationToMavenRepository'
}

tasks.register('publishWindows') {
    dependsOn 'publishMingwX64PublicationToMavenRepository'
}

tasks.register('publishLinux') {
    dependsOn 'publishLinuxX64PublicationToMavenRepository'
    dependsOn 'publishLinuxArm32HfpPublicationToMavenRepository'
}
